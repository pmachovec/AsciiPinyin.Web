using AsciiPinyin.Web.Shared.Utils;
using NUnit.Framework;

namespace AsciiPinyin.Web.Shared.Test.Utils;

[TestFixture]
internal sealed class TextUtilsTest
{
    [TestCase(null, TypeArgs = [typeof(ArgumentNullException)], TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthExceptionTest)} - null")]
    public void GetStringRealLengthExceptionTest<TException>(string theString) where TException : Exception =>
        Assert.That(() => TextUtils.GetStringRealLength(theString), Throws.TypeOf<TException>());

    [TestCase("", ExpectedResult = 0, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - empty string")]
    [TestCase("true", ExpectedResult = 4, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - true as string")]
    [TestCase("false", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - false as string")]
    [TestCase("0", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - zero as string")]
    [TestCase("1", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single digit positive integer as string")]
    [TestCase("-1", ExpectedResult = 2, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single digit negative integer as string")]
    [TestCase("123", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple digits positive integer as string")]
    [TestCase("-123", ExpectedResult = 4, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple digits negative integer as string")]
    [TestCase("0.1", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - two digits positive float as string")]
    [TestCase("-0.1", ExpectedResult = 4, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - two digits negative float as string")]
    [TestCase("123.456", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - two digits positive float as string")]
    [TestCase("-123.456", ExpectedResult = 8, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - two digits negative float as string")]
    [TestCase(" ", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - space")]
    [TestCase("   ", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple spaces")]
    [TestCase("\n", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - new line")]
    [TestCase("\n\n\n", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple new lines")]
    [TestCase("\t", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - tabluar")]
    [TestCase("\t\t\t", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple tabulars")]
    [TestCase(" \n\t", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - space, new line and tabular together")]
    [TestCase("\\", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - backslash")]
    [TestCase("\'", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - apostrophe")]
    [TestCase("\"", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - quotes")]
    [TestCase("@", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - at sign")]
    [TestCase("#", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - hash sign")]
    [TestCase("$", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - dollar sign")]
    [TestCase("{", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - opening curly bracket")]
    [TestCase("}", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - closing curly bracket")]
    [TestCase("{0}", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - placeholder")]
    [TestCase("${@}#\'\"\\", ExpectedResult = 8, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - ${{@}}#\'\"\\")]
    [TestCase("a", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single ASCII character lowercase")]
    [TestCase("A", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single ASCII character uppercase")]
    [TestCase("abc", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple ASCII characters lowercase")]
    [TestCase("ABC", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple ASCII characters uppercase")]
    [TestCase("AbCdE", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple ASCII characters case combination")]
    [TestCase("This is a longer ASCII text", ExpectedResult = 27, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - longer ASCII text with spaces")]
    [TestCase("ā", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single pinyin character lowercase")]
    [TestCase("Ā", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single pinyin character uppercase")]
    [TestCase("zhōng", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin single syllable lowercase")]
    [TestCase("ZHŌNG", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin single syllable uppercase")]
    [TestCase("ZhŌnG", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin single syllable case combination")]
    [TestCase("dàkǎoyàn", ExpectedResult = 8, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables lowercase")]
    [TestCase("DÀKǍOYÀN", ExpectedResult = 8, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables uppercase")]
    [TestCase("DàKǎOyÀn", ExpectedResult = 8, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables case combination")]
    [TestCase("dà kǎo yàn", ExpectedResult = 10, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables lowercase with spaces")]
    [TestCase("DÀ KǍO YÀN", ExpectedResult = 10, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables uppercase with spaces")]
    [TestCase("Dà KǎO yÀn", ExpectedResult = 10, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables case combination with spaces")]
    [TestCase("Dà\nKǎo\nYàn", ExpectedResult = 10, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables lowercase with new lines")]
    [TestCase("Dà\tKǎo\tYàn", ExpectedResult = 10, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables lowercase with tabulars")]
    [TestCase("Dà\tKǎo\tYàn ", ExpectedResult = 11, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - pinyin multiple syllables lowercase with new line, tabular and space")]
    [TestCase("ř", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Czech non-ASCII character lowercase")]
    [TestCase("Ř", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Czech non-ASCII character uppercase")]
    [TestCase("žščřďťň", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Czech non-ASCII characters lowercase")]
    [TestCase("ŽŠČŘĎŤŇ", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Czech non-ASCII characters uppercase")]
    [TestCase("ŽšČřĎťŇ", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Czech non-ASCII characters case combination")]
    [TestCase("Příliš žluťoučký kůň úpěl ďábelské ódy", ExpectedResult = 38, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - longer Czech text with spaces")]
    [TestCase("я", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Russian non-ASCII character lowercase")]
    [TestCase("Я", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Russian non-ASCII character uppercase")]
    [TestCase("джлщыюя", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Russian non-ASCII characters lowercase")]
    [TestCase("ДЖЛЩЫЮЯ", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Russian non-ASCII characters uppercase")]
    [TestCase("ДжЛщЫюЯ", ExpectedResult = 7, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Russian non-ASCII characters case combination")]
    [TestCase("Слишком желтая лошадь ржала дьявольские оды", ExpectedResult = 43, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - longer russian text with spaces")]
    [TestCase("中", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK unified ideographs")]
    [TestCase("⺫", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK radicals supplement")]
    [TestCase("㆕", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - Kanbun")]
    [TestCase("晴", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK compatibility ideographs")]
    [TestCase("輸", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK compatibility ideographs supplement")]
    [TestCase("㒡", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension A")]
    [TestCase("𥒯", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension B")]
    [TestCase("𫇂", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension C")]
    [TestCase("𫟖", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension D")]
    [TestCase("𬩽", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension E")]
    [TestCase("𭕄", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension F")]
    [TestCase("\U000310f9", ExpectedResult = 1, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - single Chinese character - CJK extension G")]
    [TestCase("大考验", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK unified ideographs")]
    [TestCase("大 考 验", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK unified ideographs with spaces")]
    [TestCase("大\n考\n验", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK unified ideographs with new lines")]
    [TestCase("大\t考\t验", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK unified ideographs with tabulars")]
    [TestCase("大\t考\t验 ", ExpectedResult = 6, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK unified ideographs with new line, tabular and space")]
    [TestCase("𫇂𫟖𬩽", ExpectedResult = 3, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK extensions combination")]
    [TestCase("𫇂 𫟖 𬩽", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK extensions combination with spaces")]
    [TestCase("𫇂\n𫟖\n𬩽", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK extensions combination with new lines")]
    [TestCase("𫇂\t𫟖\t𬩽", ExpectedResult = 5, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK extensions combination with tabulars")]
    [TestCase("𫇂\n𫟖\t𬩽 ", ExpectedResult = 6, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - multiple Chinese characters - CJK extensions combination with new line, tabular and space")]
    [TestCase("0-1${@}#'\"\\aAāĀřŘяЯ中⺫㆕   𫇂\n𫟖\t𬩽", ExpectedResult = 30, TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringRealLengthTest)} - crazy combination of 30 characters, symbols and whitespaces")]
    public int GetStringRealLengthTest(string theString) => TextUtils.GetStringRealLength(theString);

    [TestCase(null, TypeArgs = [typeof(ArgumentNullException)], TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringExceptionTest)} - null")]
    [TestCase("", TypeArgs = [typeof(ArgumentOutOfRangeException)], TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringExceptionTest)} - empty string")]
    public void GetStringFirstCharacterAsStringExceptionTest<TException>(string theString) where TException : Exception =>
        Assert.That(() => TextUtils.GetStringFirstCharacterAsString(theString), Throws.TypeOf<TException>());

    [TestCase("true", ExpectedResult = "t", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - true as string")]
    [TestCase("false", ExpectedResult = "f", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - false as string")]
    [TestCase("0", ExpectedResult = "0", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - zero as string")]
    [TestCase("1", ExpectedResult = "1", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single digit positive integer as string")]
    [TestCase("-1", ExpectedResult = "-", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single digit negative integer as string")]
    [TestCase("123", ExpectedResult = "1", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple digits positive integer as string")]
    [TestCase("-123", ExpectedResult = "-", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple digits negative integer as string")]
    [TestCase("0.1", ExpectedResult = "0", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - two digits positive float as string")]
    [TestCase("-0.1", ExpectedResult = "-", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - two digits negative float as string")]
    [TestCase("123.456", ExpectedResult = "1", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - two digits positive float as string")]
    [TestCase("-123.456", ExpectedResult = "-", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - two digits negative float as string")]
    [TestCase(" ", ExpectedResult = " ", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - space")]
    [TestCase("   ", ExpectedResult = " ", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple spaces")]
    [TestCase("\n", ExpectedResult = "\n", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - new line")]
    [TestCase("\n\n\n", ExpectedResult = "\n", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple new lines")]
    [TestCase("\t", ExpectedResult = "\t", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - tabluar")]
    [TestCase("\t\t\t", ExpectedResult = "\t", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple tabulars")]
    [TestCase(" \n\t", ExpectedResult = " ", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - space, new line and tabular together")]
    [TestCase("\\", ExpectedResult = "\\", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - backslash")]
    [TestCase("\'", ExpectedResult = "\'", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - apostrophe")]
    [TestCase("\"", ExpectedResult = "\"", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - quotes")]
    [TestCase("@", ExpectedResult = "@", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - at sign")]
    [TestCase("#", ExpectedResult = "#", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - hash sign")]
    [TestCase("$", ExpectedResult = "$", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - dollar sign")]
    [TestCase("{", ExpectedResult = "{", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - opening curly bracket")]
    [TestCase("}", ExpectedResult = "}", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - closing curly bracket")]
    [TestCase("{0}", ExpectedResult = "{", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - placeholder")]
    [TestCase("${@}#\'\"\\", ExpectedResult = "$", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - ${{@}}#\'\"\\")]
    [TestCase("a", ExpectedResult = "a", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single ASCII character lowercase")]
    [TestCase("A", ExpectedResult = "A", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single ASCII character uppercase")]
    [TestCase("abc", ExpectedResult = "a", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple ASCII characters lowercase")]
    [TestCase("ABC", ExpectedResult = "A", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple ASCII characters uppercase")]
    [TestCase("AbCdE", ExpectedResult = "A", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple ASCII characters case combination")]
    [TestCase("This is a longer ASCII text", ExpectedResult = "T", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - longer ASCII text with spaces")]
    [TestCase("ā", ExpectedResult = "ā", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single pinyin character lowercase")]
    [TestCase("Ā", ExpectedResult = "Ā", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single pinyin character uppercase")]
    [TestCase("zhōng", ExpectedResult = "z", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin single syllable lowercase")]
    [TestCase("ZHŌNG", ExpectedResult = "Z", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin single syllable uppercase")]
    [TestCase("ZhŌnG", ExpectedResult = "Z", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin single syllable case combination")]
    [TestCase("dàkǎoyàn", ExpectedResult = "d", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables lowercase")]
    [TestCase("DÀKǍOYÀN", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables uppercase")]
    [TestCase("DàKǎOyÀn", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables case combination")]
    [TestCase("dà kǎo yàn", ExpectedResult = "d", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables lowercase with spaces")]
    [TestCase("DÀ KǍO YÀN", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables uppercase with spaces")]
    [TestCase("Dà KǎO yÀn", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables case combination with spaces")]
    [TestCase("Dà\nKǎo\nYàn", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables lowercase with new lines")]
    [TestCase("Dà\tKǎo\tYàn", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables lowercase with tabulars")]
    [TestCase("Dà\tKǎo\tYàn ", ExpectedResult = "D", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - pinyin multiple syllables lowercase with new line, tabular and space")]
    [TestCase("ř", ExpectedResult = "ř", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Czech non-ASCII character lowercase")]
    [TestCase("Ř", ExpectedResult = "Ř", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Czech non-ASCII character uppercase")]
    [TestCase("žščřďťň", ExpectedResult = "ž", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Czech non-ASCII characters lowercase")]
    [TestCase("ŽŠČŘĎŤŇ", ExpectedResult = "Ž", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Czech non-ASCII characters uppercase")]
    [TestCase("ŽšČřĎťŇ", ExpectedResult = "Ž", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Czech non-ASCII characters case combination")]
    [TestCase("Příliš žluťoučký kůň úpěl ďábelské ódy", ExpectedResult = "P", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - longer Czech text with spaces")]
    [TestCase("я", ExpectedResult = "я", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Russian non-ASCII character lowercase")]
    [TestCase("Я", ExpectedResult = "Я", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Russian non-ASCII character uppercase")]
    [TestCase("джлщыюя", ExpectedResult = "д", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Russian non-ASCII characters lowercase")]
    [TestCase("ДЖЛЩЫЮЯ", ExpectedResult = "Д", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Russian non-ASCII characters uppercase")]
    [TestCase("ДжЛщЫюЯ", ExpectedResult = "Д", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Russian non-ASCII characters case combination")]
    [TestCase("Слишком желтая лошадь ржала дьявольские оды", ExpectedResult = "С", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - longer russian text with spaces")]
    [TestCase("中", ExpectedResult = "中", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK unified ideographs")]
    [TestCase("⺫", ExpectedResult = "⺫", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK radicals supplement")]
    [TestCase("㆕", ExpectedResult = "㆕", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - Kanbun")]
    [TestCase("晴", ExpectedResult = "晴", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK compatibility ideographs")]
    [TestCase("輸", ExpectedResult = "輸", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK compatibility ideographs supplement")]
    [TestCase("㒡", ExpectedResult = "㒡", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension A")]
    [TestCase("𥒯", ExpectedResult = "𥒯", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension B")]
    [TestCase("𫇂", ExpectedResult = "𫇂", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension C")]
    [TestCase("𫟖", ExpectedResult = "𫟖", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension D")]
    [TestCase("𬩽", ExpectedResult = "𬩽", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension E")]
    [TestCase("𭕄", ExpectedResult = "𭕄", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension F")]
    [TestCase("\U000310f9", ExpectedResult = "\U000310f9", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - single Chinese character - CJK extension G")]
    [TestCase("大考验", ExpectedResult = "大", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK unified ideographs")]
    [TestCase("大 考 验", ExpectedResult = "大", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK unified ideographs with spaces")]
    [TestCase("大\n考\n验", ExpectedResult = "大", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK unified ideographs with new lines")]
    [TestCase("大\t考\t验", ExpectedResult = "大", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK unified ideographs with tabulars")]
    [TestCase("大\t考\t验 ", ExpectedResult = "大", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK unified ideographs with new line, tabular and space")]
    [TestCase("𫇂𫟖𬩽", ExpectedResult = "𫇂", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK extensions combination")]
    [TestCase("𫇂 𫟖 𬩽", ExpectedResult = "𫇂", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK extensions combination with spaces")]
    [TestCase("𫇂\n𫟖\n𬩽", ExpectedResult = "𫇂", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK extensions combination with new lines")]
    [TestCase("𫇂\t𫟖\t𬩽", ExpectedResult = "𫇂", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK extensions combination with tabulars")]
    [TestCase("𫇂\n𫟖\t𬩽 ", ExpectedResult = "𫇂", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - multiple Chinese characters - CJK extensions combination with new line, tabular and space")]
    [TestCase("0-1${@}#'\"\\aAāĀřŘяЯ中⺫㆕   𫇂\n𫟖\t𬩽", ExpectedResult = "0", TestName = $"{nameof(TextUtilsTest)}.{nameof(GetStringFirstCharacterAsStringTest)} - crazy combination of 30 characters, symbols and whitespaces")]
    public string GetStringFirstCharacterAsStringTest(string theString) => TextUtils.GetStringFirstCharacterAsString(theString);

    [TestCase(null, TypeArgs = [typeof(ArgumentNullException)], TestName = $"{nameof(TextUtilsTest)}.{nameof(IsPureChineseExceptionTest)} - null")]
    public void IsPureChineseExceptionTest<TException>(string theString) where TException : Exception =>
        Assert.That(() => TextUtils.IsOnlyChineseCharacters(theString), Throws.TypeOf<TException>());

    [TestCase("", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - empty string")]
    [TestCase("true", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - true as string")]
    [TestCase("false", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - false as string")]
    [TestCase("0", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - zero as string")]
    [TestCase("1", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single digit positive integer as string")]
    [TestCase("-1", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single digit negative integer as string")]
    [TestCase("123", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple digits positive integer as string")]
    [TestCase("-123", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple digits negative integer as string")]
    [TestCase("0.1", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - two digits positive float as string")]
    [TestCase("-0.1", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - two digits negative float as string")]
    [TestCase("123.456", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - two digits positive float as string")]
    [TestCase("-123.456", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - two digits negative float as string")]
    [TestCase(" ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - space")]
    [TestCase("   ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple spaces")]
    [TestCase("\n", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - new line")]
    [TestCase("\n\n\n", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple new lines")]
    [TestCase("\t", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - tabluar")]
    [TestCase("\t\t\t", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple tabulars")]
    [TestCase(" \n\t", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - space, new line and tabular together")]
    [TestCase("\\", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - backslash")]
    [TestCase("\'", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - apostrophe")]
    [TestCase("\"", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - quotes")]
    [TestCase("@", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - at sign")]
    [TestCase("#", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - hash sign")]
    [TestCase("$", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - dollar sign")]
    [TestCase("{", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - opening curly bracket")]
    [TestCase("}", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - closing curly bracket")]
    [TestCase("{0}", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - placeholder")]
    [TestCase("${@}#\'\"\\", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - ${{@}}#\'\"\\")]
    [TestCase("a", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single ASCII character lowercase")]
    [TestCase("A", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single ASCII character uppercase")]
    [TestCase("abc", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple ASCII characters lowercase")]
    [TestCase("ABC", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple ASCII characters uppercase")]
    [TestCase("AbCdE", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple ASCII characters case combination")]
    [TestCase("This is a longer ASCII text", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - longer ASCII text with spaces")]
    [TestCase("ā", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single pinyin character lowercase")]
    [TestCase("Ā", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single pinyin character uppercase")]
    [TestCase("zhōng", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin single syllable lowercase")]
    [TestCase("ZHŌNG", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin single syllable uppercase")]
    [TestCase("ZhŌnG", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin single syllable case combination")]
    [TestCase("dàkǎoyàn", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables lowercase")]
    [TestCase("DÀKǍOYÀN", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables uppercase")]
    [TestCase("DàKǎOyÀn", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables case combination")]
    [TestCase("dà kǎo yàn", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables lowercase with spaces")]
    [TestCase("DÀ KǍO YÀN", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables uppercase with spaces")]
    [TestCase("Dà KǎO yÀn", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables case combination with spaces")]
    [TestCase("Dà\nKǎo\nYàn", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables lowercase with new lines")]
    [TestCase("Dà\tKǎo\tYàn", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables lowercase with tabulars")]
    [TestCase("Dà\tKǎo\tYàn ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - pinyin multiple syllables lowercase with new line, tabular and space")]
    [TestCase("ř", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Czech non-ASCII character lowercase")]
    [TestCase("Ř", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Czech non-ASCII character uppercase")]
    [TestCase("žščřďťň", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Czech non-ASCII characters lowercase")]
    [TestCase("ŽŠČŘĎŤŇ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Czech non-ASCII characters uppercase")]
    [TestCase("ŽšČřĎťŇ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Czech non-ASCII characters case combination")]
    [TestCase("Příliš žluťoučký kůň úpěl ďábelské ódy", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - longer Czech text with spaces")]
    [TestCase("я", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Russian non-ASCII character lowercase")]
    [TestCase("Я", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Russian non-ASCII character uppercase")]
    [TestCase("джлщыюя", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Russian non-ASCII characters lowercase")]
    [TestCase("ДЖЛЩЫЮЯ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Russian non-ASCII characters uppercase")]
    [TestCase("ДжЛщЫюЯ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Russian non-ASCII characters case combination")]
    [TestCase("Слишком желтая лошадь ржала дьявольские оды", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - longer russian text with spaces")]
    [TestCase("中", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK unified ideographs")]
    [TestCase("⺫", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK radicals supplement")]
    [TestCase("㆕", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - Kanbun")]
    [TestCase("晴", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK compatibility ideographs")]
    [TestCase("輸", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK compatibility ideographs supplement")]
    [TestCase("㒡", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension A")]
    [TestCase("𥒯", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension B")]
    [TestCase("𫇂", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension C")]
    [TestCase("𫟖", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension D")]
    [TestCase("𬩽", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension E")]
    [TestCase("𭕄", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension F")]
    [TestCase("\U000310f9", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - single Chinese character - CJK extension G")]
    [TestCase("大考验", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK unified ideographs")]
    [TestCase("大 考 验", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK unified ideographs with spaces")]
    [TestCase("大\n考\n验", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK unified ideographs with new lines")]
    [TestCase("大\t考\t验", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK unified ideographs with tabulars")]
    [TestCase("大\t考\t验 ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK unified ideographs with new line, tabular and space")]
    [TestCase("𫇂𫟖𬩽", ExpectedResult = true, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK extensions combination")]
    [TestCase("𫇂 𫟖 𬩽", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK extensions combination with spaces")]
    [TestCase("𫇂\n𫟖\n𬩽", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK extensions combination with new lines")]
    [TestCase("𫇂\t𫟖\t𬩽", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK extensions combination with tabulars")]
    [TestCase("𫇂\n𫟖\t𬩽 ", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - multiple Chinese characters - CJK extensions combination with new line, tabular and space")]
    [TestCase("0-1${@}#'\"\\aAāĀřŘяЯ中⺫㆕   𫇂\n𫟖\t𬩽", ExpectedResult = false, TestName = $"{nameof(TextUtilsTest)}.{nameof(IsOnlyChineseCharactersTest)} - crazy combination of 30 characters, symbols and whitespaces")]
    public bool IsOnlyChineseCharactersTest(string theString) => TextUtils.IsOnlyChineseCharacters(theString);
}
