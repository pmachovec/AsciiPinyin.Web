@using AsciiPinyin.Web.Client.Components
@using AsciiPinyin.Web.Client.Pages.IndexComponents
@using AsciiPinyin.Web.Shared.Constants
@using AsciiPinyin.Web.Shared.Models
@using AsciiPinyin.Web.Shared.Resources
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web;

@inherits ChacharFormBase

<div
    class="modal fade @CssClasses.D_NONE"
    tabindex="-1"
    role="dialog"
    id="@IDs.CHACHAR_FORM_ROOT">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header justify-content-between">
                <h4 class="modal-title fw-bold ms-3" id="theCharacter">@Localizer[Resource.CreateNewCharacter]</h4>
                <CloseButton CloseAsync="@CloseAsync" CancellationToken="@CancellationToken.None" />
            </div>
            <EditForm EditContext="EditContext" OnValidSubmit="async _ => await CheckAndSubmitAsync(CancellationToken.None)">
                <div class="modal-body m-3">
                    <DataAnnotationsValidator />
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_THE_CHARACTER_INPUT">@Localizer[Resource.ChineseCharacter]</label>
                        <InputText
                            class="form-control"
                            id="@IDs.CHACHAR_FORM_THE_CHARACTER_INPUT"
                            @bind-Value="Chachar.TheCharacter"
                            @onfocus="() => ClearError(nameof(Chachar.TheCharacter))"
                            @oninput="async changeEventArgs => await PreventMultipleCharactersAsync(changeEventArgs, CancellationToken.None)" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Chachar!.TheCharacter" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_PINYIN_INPUT">@Localizer[Resource.Pinyin]</label>
                        <InputText
                            class="form-control"
                            id="@IDs.CHACHAR_FORM_PINYIN_INPUT"
                            @bind-Value="Chachar.Pinyin"
                            @onfocus="() => ClearError(nameof(Chachar.Pinyin))" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Chachar!.Pinyin" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_IPA_INPUT">@Localizer[Resource.Ipa]</label>
                        <InputText
                            class="form-control"
                            id="@IDs.CHACHAR_FORM_IPA_INPUT"
                            @bind-Value="Chachar.Ipa"
                            @onfocus="() => ClearError(nameof(Chachar.Ipa))" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Chachar!.Ipa" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_TONE_INPUT">@Localizer[Resource.Tone]</label>
                        <InputNumber
                            class="form-control"
                            min="@NumberConstants.MIN_TONE"
                            max="@NumberConstants.MAX_TONE"
                            id="@IDs.CHACHAR_FORM_TONE_INPUT"
                            @bind-Value="Chachar.Tone"
                            @onfocus="() => ClearError(nameof(Chachar.Tone))"
                            @oninput="async changeEventArgs => await PreventToneInvalidAsync(changeEventArgs, CancellationToken.None)" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Chachar!.Tone" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_STROKES_INPUT">@Localizer[Resource.NumberOfStrokes]</label>
                        <InputNumber
                            class="form-control"
                            min="@NumberConstants.MIN_STROKES"
                            max="@NumberConstants.MAX_STROKES"
                            id="@IDs.CHACHAR_FORM_STROKES_INPUT"
                            @bind-Value="Chachar.Strokes"
                            @onfocus="() => ClearError(nameof(Chachar.Strokes))"
                            @oninput="async changeEventArgs => await PreventStrokesInvalidAsync(changeEventArgs, CancellationToken.None)" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Chachar!.Strokes" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_RADICAL_INPUT">@Localizer[Resource.Radical]</label>
                        <div class="input-group">
                            <button
                                type="button"
                                class="btn-input-text form-control"
                                id="@IDs.CHACHAR_FORM_RADICAL_INPUT"
                                @onclick="async _ => await OpenRadicalSelectorAsync(CancellationToken.None)">
                                @Chachar.RadicalCharacter
                            </button>
                            <button
                                type="button"
                                class="btn @CssClasses.BTN_OUTLINE_PRIMARY"
                                @onclick="ClearRadical">
                                &#x2715;
                            </button>
                        </div>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.CHACHAR_FORM_ALTERNATIVE_INPUT">@Localizer[Resource.RadicalAlternative]</label>
                        <div class="input-group">
                            <button
                                type="button"
                                class="btn-input-text form-control"
                                id="@IDs.CHACHAR_FORM_ALTERNATIVE_INPUT"
                                @onclick="async _ => await OpenAlternativeSelectorAsync(CancellationToken.None)">
                                @Chachar.RadicalAlternativeCharacter
                            </button>
                            <button
                                type="button"
                                class="btn"
                                id="@IDs.CHACHAR_FORM_CLEAR_ALTERNATIVE"
                                @onclick="ClearAlternative">
                                &#x2715;
                            </button>
                        </div>
                    </div>
                </div>
                <div class="border-0 modal-footer">
                    <button
                        type="submit"
                        class="btn btn-modal btn-primary">
                        @Localizer[Resource.Save]
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<EntitySelector
    @ref="RadicalSelector"
    T="@Chachar"
    Entities="@Index.Chachars.Where(chachar => chachar.IsRadical)"
    HtmlTitle="@Localizer[Resource.SelectRadical]"
    Title="@Localizer[Resource.SelectRadical]"
    RootId="@IDs.CHACHAR_FORM_RADICAL_SELECTOR"
    SelectEntityAsync="@SelectRadicalAsync"
    SelectorClass="@CssClasses.RADICAL_SELECTOR" />
<EntitySelector
    @ref="AlternativeSelector"
    T="@Alternative"
    Entities="@AvailableAlternatives"
    HtmlTitle="@Localizer[Resource.SelectRadicalAlternative]"
    Title="@Localizer[Resource.SelectRadicalAlternative]"
    RootId="@IDs.CHACHAR_FORM_ALTERNATIVE_SELECTOR"
    SelectEntityAsync="@SelectAlternativeAsync"
    SelectorClass="@CssClasses.ALTERNATIVE_SELECTOR" />
