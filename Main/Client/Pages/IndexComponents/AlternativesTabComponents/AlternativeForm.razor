@using AsciiPinyin.Web.Client.Components
@using AsciiPinyin.Web.Shared.Constants
@using AsciiPinyin.Web.Shared.Models
@using AsciiPinyin.Web.Shared.Resources
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inherits AlternativeFormBase

<div
    class="modal fade @CssClasses.D_NONE"
    tabindex="-1"
    role="dialog"
    id="@IDs.ALTERNATIVE_FORM_ROOT">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header justify-content-between">
                <h4 class="modal-title fw-bold ms-3" id="theCharacter">@Localizer[Resource.CreateNewAlternative]</h4>
                <CloseButton CloseAsync="@CloseAsync" CancellationToken="@CancellationToken.None" />
            </div>
            <EditForm EditContext="EditContext" OnValidSubmit="async _ => await CheckAndSubmitAsync(CancellationToken.None)">
                <div class="modal-body m-3">
                    <DataAnnotationsValidator />
                    <div class="form-input">
                        <label class="form-text" for="@IDs.ALTERNATIVE_FORM_THE_CHARACTER_INPUT">@Localizer[Resource.AlternativeCharacter]</label>
                        <InputText
                            class="form-control"
                            id="@IDs.ALTERNATIVE_FORM_THE_CHARACTER_INPUT"
                            @bind-Value="Alternative.TheCharacter"
                            @onfocus="() => ClearError(nameof(Alternative.TheCharacter))"
                            @oninput="async changeEventArgs => await PreventMultipleCharactersAsync(changeEventArgs, CancellationToken.None)" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Alternative!.TheCharacter" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.ALTERNATIVE_FORM_STROKES_INPUT">@Localizer[Resource.NumberOfStrokes]</label>
                        <InputNumber
                            class="form-control"
                            min="@NumberConstants.MIN_STROKES"
                            max="@NumberConstants.MAX_STROKES"
                            id="@IDs.ALTERNATIVE_FORM_STROKES_INPUT"
                            @bind-Value="Alternative.Strokes"
                            @onfocus="() => ClearError(nameof(Alternative.Strokes))"
                            @oninput="async changeEventArgs => await PreventStrokesInvalidAsync(changeEventArgs, CancellationToken.None)" />
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Alternative!.Strokes" />
                        </span>
                    </div>
                    <div class="form-input">
                        <label class="form-text" for="@IDs.ALTERNATIVE_FORM_ORIGINAL_INPUT">@Localizer[Resource.BaseCharacter]</label>
                        <div class="input-group">
                            <button
                                type="button"
                                class="btn-input-text form-control"
                                id="@IDs.ALTERNATIVE_FORM_ORIGINAL_INPUT"
                                @onclick="async _ => await OpenOriginalSelectorAsync(CancellationToken.None)">
                                @Alternative.OriginalCharacter
                            </button>
                            <button
                                type="button"
                                class="btn @CssClasses.BTN_OUTLINE_PRIMARY"
                                    id="@IDs.ALTERNATIVE_FORM_ORIGINAL_CLEAR"
                                @onclick="async _ => await ClearOriginalAsync(CancellationToken.None)">
                                &#x2715;
                            </button>
                        </div>
                        <span class="validation-message form-text text-danger">
                            <ValidationMessage For="() => Alternative!.OriginalCharacter" />
                        </span>
                    </div>
                </div>
                <div class="border-0 modal-footer">
                    <button
                        type="submit"
                        class="btn btn-modal btn-primary">
                        @Localizer[Resource.Save]
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<EntitySelector
    @ref="OriginalSelector"
    T="@Chachar"
    Entities="@Index.Chachars.Where(chachar => chachar.IsRadical)"
    HtmlTitle="@Localizer[Resource.SelectBaseCharacter]"
    Title="@Localizer[Resource.SelectBaseCharacter]"
    RootId="@IDs.ALTERNATIVE_FORM_ORIGINAL_SELECTOR"
    SelectEntityAsync="@SelectOriginalAsync"
    SelectorClass="@CssClasses.ORIGINAL_SELECTOR" />
